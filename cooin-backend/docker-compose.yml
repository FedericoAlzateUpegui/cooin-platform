version: '3.8'

# Docker Compose configuration for Cooin Backend
# Complete development and production setup

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cooin-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: cooin_db
      POSTGRES_USER: cooin_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cooin_secure_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cooin_user -d cooin_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - cooin-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cooin-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-cooin_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - cooin-network

  # Cooin Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cooin-api
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://cooin_user:${POSTGRES_PASSWORD:-cooin_secure_password}@postgres:5432/cooin_db

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-cooin_redis_password}@redis:6379/0

      # API Configuration
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7

      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}

      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000,https://cooin.app}

      # File Upload
      MAX_FILE_SIZE: 10485760
      UPLOAD_DIRECTORY: /app/uploads

      # Email (if configured)
      SMTP_SERVER: ${SMTP_SERVER}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM}

      # External APIs
      PLAID_CLIENT_ID: ${PLAID_CLIENT_ID}
      PLAID_SECRET: ${PLAID_SECRET}
      PLAID_ENVIRONMENT: ${PLAID_ENVIRONMENT:-sandbox}

      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}

    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - cooin-network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:1.24-alpine
    container_name: cooin-nginx
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - logs_data:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    networks:
      - cooin-network

  # Database Migrations (Run once)
  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cooin-migrations
    environment:
      DATABASE_URL: postgresql://cooin_user:${POSTGRES_PASSWORD:-cooin_secure_password}@postgres:5432/cooin_db
    command: ["alembic", "upgrade", "head"]
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    networks:
      - cooin-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local

networks:
  cooin-network:
    driver: bridge